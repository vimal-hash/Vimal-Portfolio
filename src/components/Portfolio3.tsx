/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/Portfolio3.glb -o src/components/Portfolio3.tsx -k 
*/
"use client"
import * as THREE from 'three'
import React from 'react'
import { useGLTF, useTexture, MeshReflectorMaterial} from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useLoader, useFrame, useThree } from '@react-three/fiber'
import { useEffect, useRef, useLayoutEffect, useState } from 'react'
import { LinearSRGBColorSpace, RepeatWrapping, TextureLoader } from 'three';
import gsap from "gsap";
type GLTFResult = GLTF & {
  nodes: {
    Cube002: THREE.Mesh
    Cube003: THREE.Mesh
    Cube005: THREE.Mesh
    Cube007: THREE.Mesh
    Cube008: THREE.Mesh
    Cube009: THREE.Mesh
    Cube010: THREE.Mesh
    Cube011: THREE.Mesh
    Cube012: THREE.Mesh
    Cube013: THREE.Mesh
    Cube014: THREE.Mesh
    Cube015: THREE.Mesh
    Cube016: THREE.Mesh
    Cube017: THREE.Mesh
    Cube018: THREE.Mesh
    Cube019: THREE.Mesh
    Cube021: THREE.Mesh
    Cube024: THREE.Mesh
    Cylinder: THREE.Mesh
    Cylinder001: THREE.Mesh
    Cylinder003: THREE.Mesh
    Plane004: THREE.Mesh
    Plane005: THREE.Mesh
    books: THREE.Mesh
    Catcus: THREE.Mesh
    chair: THREE.Mesh
    mouse: THREE.Mesh
    penguin: THREE.Mesh
    ['penguin-wing-0']: THREE.Mesh
    ['penguin-wing-1']: THREE.Mesh
    picture: THREE.Mesh
    picture001: THREE.Mesh
    plant: THREE.Mesh
    plant001: THREE.Mesh
    speaker: THREE.Mesh
    Table_small: THREE.Mesh
    Catcus_leaf: THREE.Mesh
    Cube: THREE.Mesh
    Cube027: THREE.Mesh
    Cube029: THREE.Mesh
    Cylinder002: THREE.Mesh
    Cube006: THREE.Mesh
    Cube028: THREE.Mesh
    Cube030: THREE.Mesh
    Cube031: THREE.Mesh
    Cube032: THREE.Mesh
    Cube033: THREE.Mesh
    Cube034: THREE.Mesh
    Cube035: THREE.Mesh
    Cube036: THREE.Mesh
    Cube037: THREE.Mesh
    Cube038: THREE.Mesh
    Cube039: THREE.Mesh
    Face_new: THREE.Mesh
    Hair: THREE.Mesh
    Hand: THREE.Mesh
    Leg: THREE.Mesh
    Pant: THREE.Mesh
    Shirt: THREE.Mesh
    Curve: THREE.Mesh
    Curve002_1: THREE.Mesh
    Curve002_2: THREE.Mesh
    Curve002: THREE.Mesh
    Curve008_1: THREE.Mesh
    Curve008_2: THREE.Mesh
    Curve008_3: THREE.Mesh
    Curve011_1: THREE.Mesh
    Curve011_2: THREE.Mesh
    Curve011_3: THREE.Mesh
    Curve011_4: THREE.Mesh
    Curve011_5: THREE.Mesh
    Curve011_6: THREE.Mesh
    Curve011_7: THREE.Mesh
    Curve011_8: THREE.Mesh
    Curve011_9: THREE.Mesh
    Curve011_10: THREE.Mesh
    Curve011_11: THREE.Mesh
    Curve011_12: THREE.Mesh
    Curve011_13: THREE.Mesh
    Curve011_14: THREE.Mesh
    Curve011_15: THREE.Mesh
    Curve011_16: THREE.Mesh
    Curve011_17: THREE.Mesh
    Curve011_18: THREE.Mesh
    Curve011_19: THREE.Mesh
    Curve011_20: THREE.Mesh
    Curve011_21: THREE.Mesh
    Curve011_22: THREE.Mesh
    Curve011_23: THREE.Mesh
    Curve011_24: THREE.Mesh
    Curve011_25: THREE.Mesh
    Curve011_26: THREE.Mesh
    Curve011_27: THREE.Mesh
    Curve011_28: THREE.Mesh
    Curve011_29: THREE.Mesh
    Curve011_30: THREE.Mesh
    Curve011_31: THREE.Mesh
    Curve011_32: THREE.Mesh
    Curve011_33: THREE.Mesh
    Curve011_34: THREE.Mesh
    Curve011_35: THREE.Mesh
    Curve011_36: THREE.Mesh
    Curve011_37: THREE.Mesh
    Curve011_38: THREE.Mesh
    Curve011_39: THREE.Mesh
    Curve275: THREE.Mesh
    Curve275_1: THREE.Mesh
    Curve275_2: THREE.Mesh
    Curve005: THREE.Mesh
    Curve281: THREE.Mesh
    Curve281_1: THREE.Mesh
    Curve281_2: THREE.Mesh
    Curve281_3: THREE.Mesh
    Curve281_4: THREE.Mesh
    Curve291: THREE.Mesh
    Curve291_1: THREE.Mesh
    Curve006: THREE.Mesh
    Curve304: THREE.Mesh
    Curve304_1: THREE.Mesh
    Curve010: THREE.Mesh
  }
  materials: {
    ['Material.009']: THREE.MeshStandardMaterial
    ['Material.014']: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
    ['Material.007']: THREE.MeshStandardMaterial
    ['Material.004']: THREE.MeshStandardMaterial
    ['Material.037']: THREE.MeshStandardMaterial
    ['Material.022']: THREE.MeshStandardMaterial
    ['Material.019']: THREE.MeshStandardMaterial
    ['Material.021']: THREE.MeshStandardMaterial
    ['Material.020']: THREE.MeshStandardMaterial
    ['Material.015']: THREE.MeshStandardMaterial
    ['Material.034']: THREE.MeshStandardMaterial
    ['Material.033']: THREE.MeshStandardMaterial
    ['Material.010']: THREE.MeshStandardMaterial
    ['Material.013']: THREE.MeshStandardMaterial
    ['Material.018']: THREE.MeshStandardMaterial
    ['Material.017']: THREE.MeshStandardMaterial
    ['Material.016']: THREE.MeshStandardMaterial
    ['Material.011']: THREE.MeshStandardMaterial
    ['Material.032']: THREE.MeshStandardMaterial
    ['Material.038']: THREE.MeshStandardMaterial
    Glass: THREE.MeshPhysicalMaterial
    ['Material.005']: THREE.MeshStandardMaterial
    ['Material.003']: THREE.MeshStandardMaterial
    ['Material.036']: THREE.MeshStandardMaterial
    ['Material.030']: THREE.MeshStandardMaterial
    ['Material.027']: THREE.MeshStandardMaterial
    ['Material.026']: THREE.MeshStandardMaterial
    ['Material.028']: THREE.MeshStandardMaterial
    ['Material.025']: THREE.MeshStandardMaterial
    ['Material.024']: THREE.MeshStandardMaterial
    ['SVGMat.001']: THREE.MeshStandardMaterial
    ['Material.006']: THREE.MeshStandardMaterial
    ['Material.023']: THREE.MeshStandardMaterial
    ['Material.031']: THREE.MeshStandardMaterial
    ['SVGMat.009']: THREE.MeshStandardMaterial
    ['SVGMat.010']: THREE.MeshStandardMaterial
    ['SVGMat.011']: THREE.MeshStandardMaterial
    ['SVGMat.013']: THREE.MeshStandardMaterial
    ['SVGMat.014']: THREE.MeshStandardMaterial
    ['SVGMat.015']: THREE.MeshStandardMaterial
    ['SVGMat.016']: THREE.MeshStandardMaterial
    ['SVGMat.017']: THREE.MeshStandardMaterial
    ['SVGMat.018']: THREE.MeshStandardMaterial
    ['SVGMat.019']: THREE.MeshStandardMaterial
    ['SVGMat.020']: THREE.MeshStandardMaterial
    ['SVGMat.021']: THREE.MeshStandardMaterial
    ['SVGMat.022']: THREE.MeshStandardMaterial
    ['SVGMat.023']: THREE.MeshStandardMaterial
    ['SVGMat.024']: THREE.MeshStandardMaterial
    ['SVGMat.025']: THREE.MeshStandardMaterial
    ['SVGMat.026']: THREE.MeshStandardMaterial
    ['SVGMat.027']: THREE.MeshStandardMaterial
    ['SVGMat.028']: THREE.MeshStandardMaterial
    ['SVGMat.029']: THREE.MeshStandardMaterial
    ['SVGMat.030']: THREE.MeshStandardMaterial
    ['SVGMat.031']: THREE.MeshStandardMaterial
    ['SVGMat.032']: THREE.MeshStandardMaterial
    ['SVGMat.033']: THREE.MeshStandardMaterial
    ['SVGMat.034']: THREE.MeshStandardMaterial
    ['SVGMat.035']: THREE.MeshStandardMaterial
    ['SVGMat.036']: THREE.MeshStandardMaterial
    ['SVGMat.037']: THREE.MeshStandardMaterial
    ['SVGMat.038']: THREE.MeshStandardMaterial
    ['SVGMat.039']: THREE.MeshStandardMaterial
    ['SVGMat.040']: THREE.MeshStandardMaterial
    ['SVGMat.041']: THREE.MeshStandardMaterial
    ['SVGMat.042']: THREE.MeshStandardMaterial
    ['SVGMat.043']: THREE.MeshStandardMaterial
    ['SVGMat.044']: THREE.MeshStandardMaterial
    ['SVGMat.045']: THREE.MeshStandardMaterial
    ['SVGMat.046']: THREE.MeshStandardMaterial
    ['SVGMat.047']: THREE.MeshStandardMaterial
    ['SVGMat.048']: THREE.MeshStandardMaterial
    ['SVGMat.049']: THREE.MeshStandardMaterial
    ['SVGMat.050']: THREE.MeshStandardMaterial
    ['SVGMat.051']: THREE.MeshStandardMaterial
    ['SVGMat.055']: THREE.MeshStandardMaterial
    ['SVGMat.053']: THREE.MeshStandardMaterial
    ['SVGMat.054']: THREE.MeshStandardMaterial
    ['Material.035']: THREE.MeshStandardMaterial
    ['SVGMat.060']: THREE.MeshStandardMaterial
    ['SVGMat.058']: THREE.MeshStandardMaterial
    ['SVGMat.059']: THREE.MeshStandardMaterial
    ['SVGMat.061']: THREE.MeshStandardMaterial
    ['SVGMat.062']: THREE.MeshStandardMaterial
    ['SVGMat.066']: THREE.MeshStandardMaterial
    ['SVGMat.068']: THREE.MeshStandardMaterial
    ['SVGMat.075']: THREE.MeshStandardMaterial
    ['SVGMat.077']: THREE.MeshStandardMaterial
    ['SVGMat.078']: THREE.MeshStandardMaterial
    ['SVGMat.079']: THREE.MeshStandardMaterial
  }
  animations: THREE.AnimationClip[]
}

export function Portfolio3(props: { onAnimationComplete: any }) {
  const { onAnimationComplete } = props;
  const { nodes, materials } = useGLTF('/Portfolio3.glb') as unknown as GLTFResult

  const [roughness, normal] = useLoader(TextureLoader, [
    '/terrain-roughness.jpg',
    '/terrain-normal.jpg'
  ]);

  const [diffuse, normalw, rough, roughnessMap,
    displacementMap,
    metalnessMap] = useTexture([
      '/color-wall.jpg',
      '/Rough-wall.jpg',
      '/Normal-wall.jpg',
      '/roughness-wall.jpg',
      '/Arm-wall.jpg',
      '/ao-wall.jpg',


    ])

  const [cdiffuse, cnormalw, crough, cao,
    cdisplacementMap,
    carm] = useTexture([
      '/Lw/diffuse.jpg',
      '/Lw/normal.jpg',
      '/Lw/rough.jpg',
      '/Lw/ao.jpg',
      '/Lw/displacement.jpg',
      '/Lw/arm.jpg',


    ])

  const [wdiffuse, wnormalw, wrough, wao,
    wdisplacementMap,
    warm] = useTexture([
      '/Wood/diff.jpg',
      '/Wood/normal.jpg',
      '/Wood/rough.jpg',
      '/Wood/ao.jpg',
      '/Wood/displacement.jpg',
      '/Wood/arm.jpg',


    ])

  const [rdiffuse, rnormalw, rrough, rao,
    rdisplacementMap,
    rarm] = useTexture([
      '/Rw/diffuse.jpg',
      '/Rw/normal.jpg',
      '/Rw/rough.jpg',
      '/Rw/ao.jpg',
      '/Rw/displacement.jpg',
      '/Rw/arm.jpg',


    ])
  useEffect(() => {
    const textures = [
      diffuse,
      normalw,
      roughnessMap,
      rough,
      displacementMap,
      metalnessMap
    ]

    textures.forEach((tex) => {
      tex.flipY = false
      tex.wrapS = tex.wrapT = THREE.RepeatWrapping
      tex.repeat.set(4, 4) // Adjust to scale tile size
    })
  }, [])
  useEffect(() => {
    const timeout = setTimeout(() => {
      onAnimationComplete?.(); // ← Remove 'props.' and use directly
    }, 8000);

    return () => clearTimeout(timeout);
  }, []);

  useEffect(() => {
    const textures = [
      cdiffuse,
      cnormalw,
      crough,
      cao,
      cdisplacementMap,
      carm
    ]

    textures.forEach((tex) => {
      tex.flipY = false
      tex.wrapS = tex.wrapT = THREE.RepeatWrapping
      tex.repeat.set(4, 4) // Adjust to scale tile size
    })
  }, [])

  useEffect(() => {
    const textures = [
      rdiffuse,
      rnormalw,
      rrough,
      rao,
      rdisplacementMap,
      rarm
    ]

    textures.forEach((tex) => {
      tex.flipY = false
      tex.wrapS = tex.wrapT = THREE.RepeatWrapping
      tex.repeat.set(5, 5) // Adjust to scale tile size
    })
  }, [])

  useEffect(() => {
    [normal, roughness].forEach((t) => {
      t.wrapS = RepeatWrapping;
      t.wrapT = RepeatWrapping;
      t.repeat.set(5, 5);
    });

    normal.colorSpace = LinearSRGBColorSpace;
  }, [normal, roughness]);


  const groupRef = useRef<THREE.Group>(null!)

  useEffect(() => {
    groupRef.current?.traverse((child) => {
      if ((child as THREE.Mesh).isMesh) {
        const mesh = child as THREE.Mesh
        mesh.castShadow = true
        mesh.receiveShadow = true
      }
    })
  }, [])


  // Glow
  const shelftoplight = useRef<THREE.Group>(null!)
  const Lefttoplight = useRef<THREE.Group>(null!)
  const tri7 = useRef<THREE.MeshBasicMaterial>(null!)
const tri8 = useRef<THREE.MeshBasicMaterial>(null!)
const tri9 = useRef<THREE.MeshBasicMaterial>(null!)


  useFrame(() => {
    // shelftoplight.current.color.set(0.5, 0.5, 0.5)
    // Lefttoplight.current.color.set(50, 50, 50)

    tri7.current.color.set(120, 120, 120)
    tri8.current.color.set(120, 120, 120)
    tri9.current.color.set(120, 120, 120)
    // light.current.intensity = 1 * 4


  })
  useEffect(() => {
    const timeout = setTimeout(() => {
      if (shelftoplight.current?.color?.set) {
        shelftoplight.current.color.set(80, 80, 80)
      }
    }, 8000)
    const timeout1 = setTimeout(() => {
      if (Lefttoplight.current?.color?.set) {
        Lefttoplight.current.color.set(50, 50, 50)
      }
    }, 8200)


    return () => {
      clearTimeout(timeout1)
      clearTimeout(timeout)
    }
  }, [])

  const tl = useRef<gsap.core.Timeline | null>(null);
  const floor = useRef<THREE.Mesh>(null);
  const lwall = useRef<THREE.Mesh>(null);
  const rwall = useRef<THREE.Mesh>(null);
  const showcase = useRef<THREE.Mesh>(null);
  const showcaselight = useRef<THREE.Mesh>(null);
  const showcaselightself = useRef<THREE.Mesh>(null);
  const showcasepillar = useRef<THREE.Mesh>(null);
  const striplight1 = useRef<THREE.Mesh>(null);
  const showcasepillar1 = useRef<THREE.Mesh>(null);
  const striplight2 = useRef<THREE.Mesh>(null);
  const striplight3 = useRef<THREE.Mesh>(null);
  const striplight4 = useRef<THREE.Mesh>(null);
  const striplight5 = useRef<THREE.Mesh>(null);
  const striplight6 = useRef<THREE.Mesh>(null);
  const striplight7 = useRef<THREE.Mesh>(null);
  const striplight8 = useRef<THREE.Mesh>(null);
  const striplight9 = useRef<THREE.Mesh>(null);
  const striplight10 = useRef<THREE.Mesh>(null);
  const showcasepillar2 = useRef<THREE.Mesh>(null);
  const showcasepillar3 = useRef<THREE.Mesh>(null);
  const showcasepillar4 = useRef<THREE.Mesh>(null);
  const showcasepillar5 = useRef<THREE.Mesh>(null);
  const showcasepillar6 = useRef<THREE.Mesh>(null);
  const showcasepillar7 = useRef<THREE.Mesh>(null);
  const showcasepillar8 = useRef<THREE.Mesh>(null);

  // set gpt
  const books = useRef<THREE.Mesh>(null);
  const Cactus = useRef<THREE.Mesh>(null);
  const Cactusleaf = useRef<THREE.Mesh>(null);
  const chair = useRef<THREE.Mesh>(null);
  const Cube = useRef<THREE.Mesh>(null);
  const Cube002 = useRef<THREE.Mesh>(null);
  const Cube003 = useRef<THREE.Mesh>(null);
  const Cube005 = useRef<THREE.Mesh>(null);
  const Cube006 = useRef<THREE.Mesh>(null);
  const Cube024 = useRef<THREE.Mesh>(null);
  const Cube027 = useRef<THREE.Mesh>(null);
  const mouse = useRef<THREE.Mesh>(null);
  const penguin = useRef<THREE.Mesh>(null);
  const picture = useRef<THREE.Mesh>(null);
  const picture001 = useRef<THREE.Mesh>(null);
  const Plane004 = useRef<THREE.Mesh>(null);
  const Plane005 = useRef<THREE.Mesh>(null);
  const plant = useRef<THREE.Mesh>(null);
  const plant001 = useRef<THREE.Mesh>(null);
  const speaker = useRef<THREE.Mesh>(null);
  const Table_small = useRef<THREE.Mesh>(null);
  // man
  const Face_new = useRef<THREE.Mesh>(null);
  const Hair = useRef<THREE.Mesh>(null);
  const Hand = useRef<THREE.Mesh>(null);
  const Leg = useRef<THREE.Mesh>(null);
  const Pant = useRef<THREE.Mesh>(null);
  const Shirt = useRef<THREE.Mesh>(null);


  // collections

  const Curve = useRef<THREE.Mesh>(null);
  const Curve001 = useRef<THREE.Mesh>(null);
  const Curve002 = useRef<THREE.Mesh>(null);
  const Curve003 = useRef<THREE.Mesh>(null);
  const Curve004 = useRef<THREE.Mesh>(null);
  const Curve007 = useRef<THREE.Mesh>(null);
  const Curve005 = useRef<THREE.Mesh>(null);
  const Curve011 = useRef<THREE.Mesh>(null);
  const Curve008 = useRef<THREE.Mesh>(null);
  const Curve006 = useRef<THREE.Mesh>(null);
  const Curve009 = useRef<THREE.Mesh>(null);
  const Curve010 = useRef<THREE.Mesh>(null);


  // light
  const Curve010light = useRef<THREE.PointLight>(null!);
  const Curve09light = useRef<THREE.PointLight>(null!);
  const Curve03light = useRef<THREE.PointLight>(null!);
  const Curve01light = useRef<THREE.PointLight>(null!);
  const Curve02light = useRef<THREE.PointLight>(null!);
  const Curve08light = useRef<THREE.PointLight>(null!);
  const Curve011light = useRef<THREE.PointLight>(null!);
  const Curve001light = useRef<THREE.PointLight>(null!);
  const Curve005light = useRef<THREE.PointLight>(null!);
  const Curve07light = useRef<THREE.PointLight>(null!);


  const [ready, setReady] = useState(false)

  const { camera } = useThree()


  useLayoutEffect(() => {
    tl.current = gsap.timeline();

    if (groupRef.current) {




      tl.current.set(groupRef.current.position, {
        x: 15,
        y: -5,
        z: 30,
      }, 0);


      tl.current.set(groupRef.current.rotation, {
        x: -1,
        y: 0.22,
        z: 0.3,
      }, 0);
      // 👇 Delay visibility by 50ms after set() so it's ready
      setTimeout(() => {
        setReady(true)
      }, 50)

      tl.current.to(groupRef.current.position, {
        duration: 4,
        x: 10,
        y: -4,
        z: 20,
      }, 0);


      tl.current.to(groupRef.current.position, {
        duration: 1,
        x: 0,
        y: 0,
        z: 0,
      }, 3);

      tl.current.to(groupRef.current.rotation, {
        duration: 1,
        x: 0,
        y: 0,
        z: 0,
      }, 3);



      tl.current.set(floor.current.scale, {
        x: 0,
        y: 0,
        z: 0,
      }, 0);


      tl.current.to(floor.current.scale, {
        duration: 0.1,
        x: 1,
        y: 1,
        z: 1,
      }, 4);


      tl.current.from(lwall.current.scale, {
        x: 0,
        y: 0,
        z: 0,
      }, 0);


      tl.current.to(lwall.current.scale, {
        duration: 0.1,
        x: 0.032,
        y: 1.856,
        z: 6.427,
        ease: "back.out(1.7)"
      }, 4);



      tl.current.from(rwall.current.scale, {
        x: 0,
        y: 0,
        z: 0,
      }, 0);


      tl.current.to(rwall.current.scale, {
        duration: 0.1,
        x: 0.032,
        y: 1.856,
        z: 6.427,
        ease: "back.out(1.7)"
      }, 4);


      tl.current.from(showcase.current.position, {
        x: 0,
        y: -10,
        z: 0,
      }, 0);


      tl.current.to(showcase.current.position, {
        duration: 2,
        x: 0.087,
        y: 1.863,
        z: 7.487,
        ease: "back.out(1.7)"
      }, 4.5);






      tl.current.set(showcaselight.current.scale, { x: 0, y: 0, z: 0 }, 0);
      tl.current.to(showcaselight.current.scale, {
        duration: 1,
        x: 1, y: 1, z: 1,
        ease: "back.out(1.7)"
      }, 4.5);



      tl.current.set(showcaselightself.current.scale, { x: 0, y: 0, z: 0 }, 0);
      tl.current.to(showcaselightself.current.scale, {
        duration: 1,
        x: 1, y: 1, z: 1,
        ease: "back.out(1.7)"
      }, 4.5);



      tl.current.from(showcasepillar.current.position, {
        x: -5.962,
        y: 50,
        z: 5.961,
      }, 0);


      tl.current.to(showcasepillar.current.position, {
        duration: 2,
        x: -5.962,
        y: 1.857,
        z: 5.961,

      }, 4.5);











      tl.current.from(striplight1.current.position, {
        x: -5.801,
        y: 50,
        z: 5.657,
      }, 0);


      tl.current.to(striplight1.current.position, {
        duration: 2,
        x: -5.801,
        y: 1.902,
        z: 5.657,

      }, 4.5);


      tl.current.from(showcasepillar1.current.position, {
        x: -4.501,
        y: 50,
        z: 6.452,
      }, 0);


      tl.current.to(showcasepillar1.current.position, {
        duration: 2,
        x: -4.501,
        y: 1.857,
        z: 6.452,

      }, 4.5);


      tl.current.from(striplight2.current.position, {
        x: -4.401,
        y: 50,
        z: 6.16,
      }, 0);


      tl.current.to(striplight2.current.position, {
        duration: 2,
        x: -4.401,
        y: 1.902,
        z: 6.16,

      }, 4.5);


      tl.current.from(showcasepillar2.current.position, {
        x: -3.026,
        y: 50,
        z: 6.808,
      }, 0);


      tl.current.to(showcasepillar2.current.position, {
        duration: 2,
        x: -3.026,
        y: 1.857,
        z: 6.808,

      }, 4.5);


      tl.current.from(showcasepillar3.current.position, {
        x: -1.547,
        y: 50,
        z: 7.08,
      }, 0);


      tl.current.to(showcasepillar3.current.position, {
        duration: 2,
        x: -1.547,
        y: 1.857,
        z: 7.08,

      }, 4.5);


      tl.current.from(showcasepillar4.current.position, {
        x: 0.042,
        y: 50,
        z: 7.129,
      }, 0);


      tl.current.to(showcasepillar4.current.position, {
        duration: 2,
        x: 0.042,
        y: 1.857,
        z: 7.129,

      }, 4.5);


      tl.current.from(showcasepillar5.current.position, {
        x: 1.599,
        y: 50,
        z: 7.129,
      }, 0);


      tl.current.to(showcasepillar5.current.position, {
        duration: 2,
        x: 1.599,
        y: 1.857,
        z: 7.063,

      }, 4.5);

      tl.current.from(showcasepillar6.current.position, {
        x: 3.094,
        y: 50,
        z: 6.843,
      }, 0);


      tl.current.to(showcasepillar6.current.position, {
        duration: 2,
        x: 3.094,
        y: 1.857,
        z: 6.843,

      }, 4.5);


      tl.current.from(showcasepillar7.current.position, {
        x: 4.566,
        y: 50,
        z: 6.454,
      }, 0);


      tl.current.to(showcasepillar7.current.position, {
        duration: 2,
        x: 4.566,
        y: 1.857,
        z: 6.454,

      }, 4.5);



      tl.current.from(showcasepillar8.current.position, {
        x: 5.984,
        y: 50,
        z: 6.843,
      }, 0);


      tl.current.to(showcasepillar8.current.position, {
        duration: 2,
        x: 5.984,
        y: 1.857,
        z: 5.895,

      }, 4.5);




      tl.current.from(striplight3.current.position, {
        x: -2.946,
        y: 50,
        z: 6.527,
      }, 0);


      tl.current.to(striplight3.current.position, {
        duration: 2,
        x: -2.946,
        y: 1.902,
        z: 6.527,

      }, 4.5);



      tl.current.from(striplight4.current.position, {
        x: -1.475,
        y: 50,
        z: 6.749,
      }, 0);


      tl.current.to(striplight4.current.position, {
        duration: 2,
        x: -1.475,
        y: 1.902,
        z: 6.749,

      }, 4.5);




      tl.current.from(striplight5.current.position, {
        x: 0.044,
        y: 50,
        z: 6.812,
      }, 0);


      tl.current.to(striplight5.current.position, {
        duration: 2,
        x: 0.044,
        y: 1.902,
        z: 6.812,

      }, 4.5);



      tl.current.from(striplight6.current.position, {
        x: 1.554,
        y: 50,
        z: 6.767,
      }, 0);


      tl.current.to(striplight6.current.position, {
        duration: 2,
        x: 1.554,
        y: 1.902,
        z: 6.767,

      }, 4.5);



      tl.current.from(striplight7.current.position, {
        x: 3.049,
        y: 50,
        z: 6.528,
      }, 0);


      tl.current.to(striplight7.current.position, {
        duration: 2,
        x: 3.049,
        y: 1.902,
        z: 6.528,

      }, 4.5);




      tl.current.from(striplight8.current.position, {
        x: 4.486,
        y: 50,
        z: 6.137,
      }, 0);


      tl.current.to(striplight8.current.position, {
        duration: 2,
        x: 4.486,
        y: 1.902,
        z: 6.137,

      }, 4.5);



      tl.current.from(striplight9.current.position, {
        x: 5.88,
        y: 50,
        z: 5.587,
      }, 0);


      tl.current.to(striplight9.current.position, {
        duration: 2,
        x: 5.88,
        y: 1.902,
        z: 5.587,

      }, 4.5);




      tl.current.from(striplight10.current.position, {
        x: -7.661,
        y: 50,
        z: 5.185,
      }, 0);


      tl.current.to(striplight10.current.position, {
        duration: 2,
        x: -7.661,
        y: 1.857,
        z: 5.185,

      }, 4.5);

      if (books.current) {
        tl.current.set(books.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(books.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (Cactus.current) {
        tl.current.set(Cactus.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Cactus.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (Cactusleaf.current) {
        tl.current.set(Cactusleaf.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Cactusleaf.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (chair.current) {
        tl.current.set(chair.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(chair.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (Cube.current) {
        tl.current.set(Cube.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Cube.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (Cube002.current) {
        tl.current.set(Cube002.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Cube002.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (Cube003.current) {
        tl.current.set(Cube003.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Cube003.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (Cube005.current) {
        tl.current.set(Cube005.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Cube005.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (Cube006.current) {
        tl.current.set(Cube006.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Cube006.current.scale, { duration: 1, x: -0.17, y: -0.026, z: -0.539, ease: "back.out(1.7)" }, 4.5);
      }

      if (Cube024.current) {
        tl.current.set(Cube024.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Cube024.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (Cube027.current) {
        tl.current.set(Cube027.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Cube027.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (mouse.current) {
        tl.current.set(mouse.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(mouse.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (penguin.current) {
        tl.current.set(penguin.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(penguin.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (picture.current) {
        tl.current.set(picture.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(picture.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (picture001.current) {
        tl.current.set(picture001.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(picture001.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (Plane004.current) {
        tl.current.set(Plane004.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Plane004.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (Plane005.current) {
        tl.current.set(Plane005.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Plane005.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (plant.current) {
        tl.current.set(plant.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(plant.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (plant001.current) {
        tl.current.set(plant001.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(plant001.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (speaker.current) {
        tl.current.set(speaker.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(speaker.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      if (Table_small.current) {
        tl.current.set(Table_small.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Table_small.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "back.out(1.7)" }, 4.5);
      }

      // Man
      if (Face_new.current) {
        tl.current.set(Face_new.current.position, { x: 5.777, y: 50, z: 0.932 }, 0);
        tl.current.to(Face_new.current.position, {
          duration: 1,
          x: 5.777,
          y: 1.751,
          z: 0.932,
          ease: "power2.out"
        }, 4.5);
      }

      if (Hair.current) {
        tl.current.set(Hair.current.position, { x: 5.725, y: 50, z: 0.964 }, 0);
        tl.current.to(Hair.current.position, {
          duration: 1,
          x: 5.725,
          y: 0.407,
          z: 0.964,
          ease: "power2.out"
        }, 4.5);
      }

      if (Hand.current) {
        tl.current.set(Hand.current.position, { x: 5.729, y: 50, z: 0.961 }, 0);
        tl.current.to(Hand.current.position, {
          duration: 1,
          x: 5.729,
          y: 0.322,
          z: 0.961,
          ease: "power2.out"
        }, 4.5);
      }

      if (Leg.current) {
        tl.current.set(Leg.current.position, { x: 5.722, y: 50, z: 0.966 }, 0);
        tl.current.to(Leg.current.position, {
          duration: 1,
          x: 5.722,
          y: 0.322,
          z: 0.966,
          ease: "power2.out"
        }, 4.5);
      }

      if (Pant.current) {
        tl.current.set(Pant.current.position, { x: 5.722, y: 50, z: 0.966 }, 0);
        tl.current.to(Pant.current.position, {
          duration: 1,
          x: 5.722,
          y: 0.322,
          z: 0.966,
          ease: "power2.out"
        }, 4.5);
      }

      if (Shirt.current) {
        tl.current.set(Shirt.current.position, { x: 5.722, y: 50, z: 0.966 }, 0);
        tl.current.to(Shirt.current.position, {
          duration: 1,
          x: 5.722,
          y: 0.322,
          z: 0.966,
          ease: "power2.out"
        }, 4.5);
      }



      // Animation for Curve
      if (Curve.current) {
        tl.current.set(Curve.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Curve.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "sine.out" }, 4.5);
      }

      // Animation for Curve001
      if (Curve001.current) {
        tl.current.set(Curve001.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Curve001.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "sine.out" }, 4.5);
      }

      // Animation for Curve002
      if (Curve002.current) {
        tl.current.set(Curve002.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Curve002.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "sine.out" }, 4.5);
      }

      // Animation for Curve003
      if (Curve003.current) {
        tl.current.set(Curve003.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Curve003.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "sine.out" }, 4.5);
      }

      // Animation for Curve004
      if (Curve004.current) {
        tl.current.set(Curve004.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Curve004.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "sine.out" }, 4.5);
      }

      // Animation for Curve007
      if (Curve007.current) {
        tl.current.set(Curve007.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Curve007.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "sine.out" }, 4.5);
      }

      // Animation for Curve005
      if (Curve005.current) {
        tl.current.set(Curve005.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Curve005.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "sine.out" }, 4.5);
      }

      // Animation for Curve011
      if (Curve011.current) {
        tl.current.set(Curve011.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Curve011.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "sine.out" }, 4.5);
      }

      // Animation for Curve008
      if (Curve008.current) {
        tl.current.set(Curve008.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Curve008.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "sine.out" }, 4.5);
      }

      // Animation for Curve006
      if (Curve006.current) {
        tl.current.set(Curve006.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Curve006.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "sine.out" }, 4.5);
      }

      // Animation for Curve009
      if (Curve009.current) {
        tl.current.set(Curve009.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Curve009.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "sine.out" }, 4.5);
      }

      // Animation for Curve010
      if (Curve010.current) {
        tl.current.set(Curve010.current.scale, { x: 0, y: 0, z: 0 }, 0);
        tl.current.to(Curve010.current.scale, { duration: 1, x: 1, y: 1, z: 1, ease: "sine.out" }, 4.5);
      }



    }

    tl.current.fromTo(Curve010light.current, {
      intensity: 0
    }, {
      intensity: 10,
      duration: 1,
      ease: 'power2.out'
    }, 7.3);


    tl.current.fromTo(Curve09light.current, {
      intensity: 0
    }, {
      intensity: 10,
      duration: 1,
      ease: 'power2.out'
    }, 7.3);


    tl.current.fromTo(Curve03light.current, {
      intensity: 0
    }, {
      intensity: 10,
      duration: 1,
      ease: 'power2.out'
    }, 7.3);


    tl.current.fromTo(Curve01light.current, {
      intensity: 0
    }, {
      intensity: 10,
      duration: 1,
      ease: 'power2.out'
    }, 7.3);

    tl.current.fromTo(Curve02light.current, {
      intensity: 0
    }, {
      intensity: 10,
      duration: 1,
      ease: 'power2.out'
    }, 7.3);

    tl.current.fromTo(Curve08light.current, {
      intensity: 0
    }, {
      intensity: 10,
      duration: 1,
      ease: 'power2.out'
    }, 7.3);


    tl.current.fromTo(Curve011light.current, {
      intensity: 0
    }, {
      intensity: 10,
      duration: 1,
      ease: 'power2.out'
    }, 7.3);



    tl.current.fromTo(Curve001light.current, {
      intensity: 0
    }, {
      intensity: 10,
      duration: 1,
      ease: 'power2.out'
    }, 7.3);

    tl.current.to(camera.rotation, {
      duration: 3,
      y: THREE.MathUtils.degToRad(80),
      ease: 'sine.inOut'
    }, 8.5);

    tl.current.fromTo(Curve005light.current, {
      intensity: 0
    }, {
      intensity: 10,
      duration: 1,
      ease: 'power2.out'
    }, 7.3);

    tl.current.fromTo(Curve07light.current, {
      intensity: 0
    }, {
      intensity: 10,
      duration: 1,
      ease: 'power2.out'
    }, 7.3);

  }, []);

  return (
    <>
      <group ref={groupRef} visible={ready} dispose={null}>
        <mesh ref={Cube002} castShadow receiveShadow name="Cube002" geometry={nodes.Cube002.geometry} material={materials['Material.009']} position={[7.048, 0.664, -1.984]} />
        <mesh ref={Cube003} name="Cube003" geometry={nodes.Cube003.geometry} material={materials['Material.014']} position={[7.124, 1.23, -2.215]} rotation={[0, 0.365, 0]} />
        <mesh ref={Cube005} name="Cube005" geometry={nodes.Cube005.geometry} material={materials['Material.014']} position={[7.313, 1.238, -0.467]} />
        <mesh castShadow receiveShadow name="Cube007" geometry={nodes.Cube007.geometry} position={[-0.019, 0.122, 3.471]} rotation={[0, Math.PI / 2, 0]} >
          <meshBasicMaterial ref={tri7} toneMapped={false} />
        </mesh>
        <mesh castShadow receiveShadow name="Cube008" geometry={nodes.Cube008.geometry} position={[-2.096, 0.122, -1.017]} rotation={[0, -0.402, 0]} >
          <meshBasicMaterial ref={tri8} toneMapped={false} />
        </mesh>
        <mesh castShadow receiveShadow name="Cube009" geometry={nodes.Cube009.geometry} position={[2.058, 0.122, -1.036]} rotation={[0, 0.402, 0]} >
          <meshBasicMaterial ref={tri9} toneMapped={false} />
        </mesh>
        <mesh ref={striplight5} name="Cube010" geometry={nodes.Cube010.geometry} material={materials['Material.007']} position={[0.044, 1.902, 6.812]} />
        <mesh ref={striplight4} name="Cube011" geometry={nodes.Cube011.geometry} material={materials['Material.007']} position={[-1.475, 1.902, 6.749]} />
        <mesh ref={striplight3} name="Cube012" geometry={nodes.Cube012.geometry} material={materials['Material.007']} position={[-2.946, 1.902, 6.527]} />
        <mesh ref={striplight2} name="Cube013" geometry={nodes.Cube013.geometry} material={materials['Material.007']} position={[-4.401, 1.902, 6.16]} rotation={[0, -0.085, 0]} />
        <mesh ref={striplight1} name="Cube014" geometry={nodes.Cube014.geometry} material={materials['Material.007']} position={[-5.801, 1.902, 5.657]} rotation={[0, -0.085, 0]} />
        <mesh ref={striplight6} name="Cube015" geometry={nodes.Cube015.geometry} material={materials['Material.007']} position={[1.554, 1.902, 6.767]} />
        <mesh ref={striplight7} name="Cube016" geometry={nodes.Cube016.geometry} material={materials['Material.007']} position={[3.049, 1.902, 6.528]} />
        <mesh ref={striplight8} name="Cube017" geometry={nodes.Cube017.geometry} material={materials['Material.007']} position={[4.486, 1.902, 6.137]} />
        <mesh ref={striplight9} name="Cube018" geometry={nodes.Cube018.geometry} material={materials['Material.007']} position={[5.88, 1.902, 5.587]} />
        <mesh ref={showcaselight} name="Cube019" geometry={nodes.Cube019.geometry} position={[0, 3.69, 7.153]} >
          <meshBasicMaterial ref={shelftoplight} toneMapped={false} />
        </mesh>
        <mesh ref={showcaselightself} name="Cube021" geometry={nodes.Cube021.geometry} position={[0, 1.772, 7.305]} scale={[1.04, 1, 1]} >
          <meshStandardMaterial
            map={wdiffuse}
            normalMap={wnormalw}
            roughnessMap={wrough}
            aoMap={wao}
            metalnessMap={warm}
            displacementMap={wdisplacementMap}
            displacementScale={0.03}
            displacementBias={-0.05}
            aoMapIntensity={1}
            roughness={0.5}
            metalness={100}
            color="#ffffff"
          />

        </mesh>
        <mesh ref={Cube024} name="Cube024" geometry={nodes.Cube024.geometry} material={materials['Material.022']} position={[7.431, 3.606, -1.007]} rotation={[0.003, 0, 0]} >
          <meshBasicMaterial ref={Lefttoplight} toneMapped={false} />
        </mesh>
        <mesh name="Cylinder" geometry={nodes.Cylinder.geometry} material={materials['Material.019']} position={[0, 0.519, 0]} rotation={[0, -0.178, 0]} />
        <mesh castShadow receiveShadow name="Cylinder001" geometry={nodes.Cylinder001.geometry} material={materials['Material.021']} position={[0, 0.314, 0]} />
        <mesh name="Cylinder003" geometry={nodes.Cylinder003.geometry} material={materials['Material.020']} position={[0, 0.667, 0]} />
        <mesh ref={Plane004} name="Plane004" geometry={nodes.Plane004.geometry} material={materials['Material.015']} position={[7.287, 1.233, -0.466]} rotation={[0, 0, -Math.PI / 2]} />
        <mesh ref={Plane005} name="Plane005" geometry={nodes.Plane005.geometry} material={materials['Material.015']} position={[7.083, 1.226, -1.947]} rotation={[-Math.PI, 0.45, Math.PI / 2]} />
        <mesh ref={books} name="books" geometry={nodes.books.geometry} material={materials['Material.034']} position={[7.486, 2.345, -2.989]} rotation={[-1.571, 0.004, 0.011]} />
        <mesh ref={Cactus} name="Catcus" geometry={nodes.Catcus.geometry} material={materials['Material.033']} position={[7.486, 2.345, -2.989]} rotation={[-1.571, 0.004, 0.011]} />
        <mesh ref={chair} name="chair" geometry={nodes.chair.geometry} material={materials['Material.010']} position={[5.701, 0.224, -0.663]} rotation={[Math.PI, -0.011, Math.PI]} />
        <mesh ref={mouse} name="mouse" geometry={nodes.mouse.geometry} material={materials['Material.013']} position={[6.368, 0.013, 1.149]} rotation={[Math.PI, -0.011, Math.PI]} />
        <mesh ref={penguin} name="penguin" geometry={nodes.penguin.geometry} material={nodes.penguin.material} position={[6.303, 0.828, -2.613]} rotation={[Math.PI, -1.186, Math.PI]}>
          <mesh name="penguin-wing-0" geometry={nodes['penguin-wing-0'].geometry} material={nodes['penguin-wing-0'].material} />
          <mesh name="penguin-wing-1" geometry={nodes['penguin-wing-1'].geometry} material={nodes['penguin-wing-1'].material} />
        </mesh>
        <mesh ref={picture} name="picture" geometry={nodes.picture.geometry} material={materials['Material.018']} position={[7.638, 2.13, 0.711]} rotation={[Math.PI, -0.011, Math.PI]} />
        <mesh ref={picture001} name="picture001" geometry={nodes.picture001.geometry} material={materials['Material.017']} position={[7.621, 2.165, 0.711]} rotation={[Math.PI, -0.011, Math.PI]} />
        <mesh ref={plant} name="plant" geometry={nodes.plant.geometry} material={materials['Material.016']} position={[6.833, 0.18, 1.463]} rotation={[Math.PI, -0.011, Math.PI]} />
        <mesh ref={plant001} name="plant001" geometry={nodes.plant001.geometry} material={materials['Material.011']} position={[6.833, 0.18, 1.463]} rotation={[Math.PI, -0.011, Math.PI]} />
        <mesh ref={speaker} name="speaker" geometry={nodes.speaker.geometry} material={nodes.speaker.material} position={[5.844, 0.732, -2.568]} rotation={[0, -1, 0.049]} />
        <mesh ref={Table_small} name="Table_small" geometry={nodes.Table_small.geometry} material={nodes.Table_small.material} position={[7.486, 2.345, -2.989]} rotation={[-1.571, 0.004, 0.011]} />
        <mesh ref={Cactusleaf} name="Catcus_leaf" geometry={nodes.Catcus_leaf.geometry} material={materials['Material.032']} position={[7.486, 2.345, -2.989]} rotation={[-1.571, 0.004, 0.011]} />
        <mesh ref={showcase} receiveShadow name="Cube" geometry={nodes.Cube.geometry} position={[0.087, 1.863, 7.487]} scale={[7.081, 1.809, 0.058]} >
          <meshStandardMaterial
            map={cdiffuse}
            normalMap={cnormalw}
            roughnessMap={crough}

            roughness={1}






            metalness={0.8}



            color="#111111"
          />

        </mesh>
        <mesh ref={lwall} name="Cube027" geometry={nodes.Cube027.geometry} position={[7.692, 1.904, -0.998]} scale={[0.032, 1.856, 6.427]} >
          <MeshReflectorMaterial
            map={rdiffuse}
            normalMap={rnormalw}
            roughnessMap={rrough}

            roughness={10}
            blur={[1000, 1000]}
            resolution={1024}
            mixBlur={20}
            mixStrength={50}
            metalness={0.5}
            depthScale={1.2}

            color="#111111"
            aoMapIntensity={1.5}
          />
        </mesh>

        <mesh
          receiveShadow
          rotation={[-Math.PI / 2, 0, 0]}
          position={[0, -0.001, 0]}
          ref={floor}
        >
          <planeGeometry args={[30, 30]} />
          <MeshReflectorMaterial


            blur={[500, 1000]}
            resolution={1024}
            mixBlur={10}
            mixStrength={80}
            roughness={20}
            depthScale={0.5}
            minDepthThreshold={0.4}
            maxDepthThreshold={1.25}
            color="#101010"
            metalness={0.7}
          />
        </mesh>
        <mesh castShadow receiveShadow name="Cylinder002" geometry={nodes.Cylinder002.geometry} material={materials['Material.003']} position={[0, 0.087, -0.056]} scale={[5.607, 0.067, 5.607]} />
        <mesh ref={Cube006} name="Cube006" geometry={nodes.Cube006.geometry} material={materials['Material.005']} position={[6.805, 0.753, -0.41]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-0.17, -0.026, -0.539]} />
        <mesh ref={showcasepillar4} name="Cube028" geometry={nodes.Cube028.geometry} material={materials['Material.036']} position={[0.042, 1.857, 7.129]} scale={[0.047, 1.771, 0.263]} />
        <mesh ref={showcasepillar3} name="Cube030" geometry={nodes.Cube030.geometry} material={materials['Material.036']} position={[-1.547, 1.857, 7.08]} rotation={[0, -0.201, 0]} scale={[0.047, 1.771, 0.263]} />
        <mesh ref={showcasepillar2} name="Cube031" geometry={nodes.Cube031.geometry} material={materials['Material.036']} position={[-3.026, 1.857, 6.808]} rotation={[0, -0.375, 0]} scale={[0.047, 1.771, 0.263]} />
        <mesh ref={showcasepillar1} name="Cube032" geometry={nodes.Cube032.geometry} material={materials['Material.036']} position={[-4.501, 1.857, 6.452]} rotation={[0, -0.395, 0]} scale={[0.047, 1.771, 0.263]} />
        <mesh ref={showcasepillar} name="Cube033" geometry={nodes.Cube033.geometry} material={materials['Material.036']} position={[-5.962, 1.857, 5.961]} rotation={[0, -0.435, 0]} scale={[0.047, 1.771, 0.263]} />
        <mesh ref={showcasepillar5} name="Cube034" geometry={nodes.Cube034.geometry} material={materials['Material.036']} position={[1.599, 1.857, 7.063]} rotation={[0, 0.038, 0]} scale={[0.047, 1.771, 0.263]} />
        <mesh ref={showcasepillar6} name="Cube035" geometry={nodes.Cube035.geometry} material={materials['Material.036']} position={[3.094, 1.857, 6.843]} rotation={[0, 0.261, 0]} scale={[0.047, 1.771, 0.263]} />
        <mesh ref={showcasepillar7} name="Cube036" geometry={nodes.Cube036.geometry} material={materials['Material.036']} position={[4.566, 1.857, 6.454]} rotation={[0, 0.357, 0]} scale={[0.047, 1.771, 0.263]} />
        <mesh ref={showcasepillar8} name="Cube037" geometry={nodes.Cube037.geometry} material={materials['Material.036']} position={[5.984, 1.857, 5.895]} rotation={[0, 0.361, 0]} scale={[0.047, 1.771, 0.263]} />
        <mesh ref={striplight10} name="Cube038" geometry={nodes.Cube038.geometry} material={materials['Material.036']} position={[-7.661, 1.857, 5.185]} rotation={[0, -0.435, 0]} scale={[0.047, 1.771, 0.263]} />
        <mesh ref={rwall} name="Cube039" geometry={nodes.Cube039.geometry} position={[-7.623, 1.904, -0.998]} rotation={[Math.PI, -0.001, Math.PI]} scale={[0.032, 1.856, 6.427]} >
          <MeshReflectorMaterial
            map={diffuse}
            normalMap={normalw}
            roughnessMap={rough}

            roughness={1}

            blur={[1000, 1000]}
            resolution={1024}
            mixBlur={20}
            mixStrength={50}

            metalness={0.3}
            depthScale={1.2}
            minDepthThreshold={0.4}
            maxDepthThreshold={1.25}
            color="#111111"
          />
        </mesh>
        <mesh ref={Face_new} castShadow receiveShadow name="Face_new" geometry={nodes.Face_new.geometry} material={materials['Material.030']} position={[5.777, 1.751, 0.932]} rotation={[1.549, -0.036, -2.124]} />
        <mesh ref={Hair} castShadow receiveShadow name="Hair" geometry={nodes.Hair.geometry} material={materials['Material.027']} position={[5.725, 0.407, 0.964]} rotation={[-Math.PI, 0.94, -Math.PI]} />
        <mesh ref={Hand} castShadow receiveShadow name="Hand" geometry={nodes.Hand.geometry} material={materials['Material.026']} position={[5.729, 0.322, 0.961]} rotation={[-Math.PI, 0.94, -Math.PI]} />
        <mesh ref={Leg} castShadow receiveShadow name="Leg" geometry={nodes.Leg.geometry} material={materials['Material.028']} position={[5.722, 0.322, 0.966]} rotation={[-Math.PI, 0.94, -Math.PI]} />
        <mesh ref={Pant} castShadow receiveShadow name="Pant" geometry={nodes.Pant.geometry} material={materials['Material.025']} position={[5.722, 0.322, 0.966]} rotation={[-Math.PI, 0.94, -Math.PI]} />
        <mesh ref={Shirt} castShadow receiveShadow name="Shirt" geometry={nodes.Shirt.geometry} material={materials['Material.024']} position={[5.722, 0.322, 0.966]} rotation={[-Math.PI, 0.94, -Math.PI]} />
        <mesh ref={Curve} castShadow receiveShadow name="Curve" geometry={nodes.Curve.geometry} material={materials['SVGMat.001']} position={[3.838, 2.434, 6.611]} rotation={[-1.58, -0.004, 0.434]} >
          <pointLight ref={Curve001light} castShadow receiveShadow intensity={10} color="#96DCFF" position={[0, -0.2, 1.2]} />
        </mesh>
        <group ref={Curve001} castShadow receiveShadow name="Curve001" position={[-2.178, 2.56, 7.079]} rotation={[1.585, 0.001, -3.139]}>
          <mesh name="Curve002_1" geometry={nodes.Curve002_1.geometry} material={materials['Material.006']} >

          </mesh>
          <mesh name="Curve002_2" geometry={nodes.Curve002_2.geometry} material={materials['Material.023']} />
          <pointLight ref={Curve01light} castShadow receiveShadow intensity={10} color="#96DCFF" position={[0.15, 0, -1.1]} />
        </group>
        <mesh ref={Curve002} castShadow receiveShadow name="Curve002" geometry={nodes.Curve002.geometry} material={materials['Material.031']} position={[-0.728, 2.526, 7.038]} rotation={[-1.551, 0, 0]} >
          <pointLight ref={Curve02light} castShadow receiveShadow intensity={10} color="#96DCFF" position={[-0.1, 0, 1.2]} />

        </mesh>
        <group ref={Curve003} castShadow receiveShadow name="Curve003" position={[-3.833, 2.53, 6.689]} rotation={[1.568, -0.006, -2.725]}>
          <mesh name="Curve008_1" geometry={nodes.Curve008_1.geometry} material={materials['SVGMat.009']} />
          <mesh name="Curve008_2" geometry={nodes.Curve008_2.geometry} material={materials['SVGMat.010']} />
          <mesh name="Curve008_3" geometry={nodes.Curve008_3.geometry} material={materials['SVGMat.011']} />
          <pointLight ref={Curve03light} castShadow receiveShadow intensity={10} color="#96DCFF" position={[0, 0, -1.1]} />
        </group>
        <group ref={Curve004} name="Curve004" position={[-6.78, 0.804, 5.681]} rotation={[1.571, -0.002, -2.743]}>
          {/* <pointLight   intensity={10} color="#96DCFF"  position={[0, -0.2, 0]} /> */}
          <mesh name="Curve011_1" geometry={nodes.Curve011_1.geometry} material={materials['SVGMat.013']} />
          <mesh name="Curve011_2" geometry={nodes.Curve011_2.geometry} material={materials['SVGMat.014']} />
          <mesh name="Curve011_3" geometry={nodes.Curve011_3.geometry} material={materials['SVGMat.015']} />
          <mesh name="Curve011_4" geometry={nodes.Curve011_4.geometry} material={materials['SVGMat.016']} />
          <mesh name="Curve011_5" geometry={nodes.Curve011_5.geometry} material={materials['SVGMat.017']} />
          <mesh name="Curve011_6" geometry={nodes.Curve011_6.geometry} material={materials['SVGMat.018']} />
          <mesh name="Curve011_7" geometry={nodes.Curve011_7.geometry} material={materials['SVGMat.019']} />
          <mesh name="Curve011_8" geometry={nodes.Curve011_8.geometry} material={materials['SVGMat.020']} />
          <mesh name="Curve011_9" geometry={nodes.Curve011_9.geometry} material={materials['SVGMat.021']} />
          <mesh name="Curve011_10" geometry={nodes.Curve011_10.geometry} material={materials['SVGMat.022']} />
          <mesh name="Curve011_11" geometry={nodes.Curve011_11.geometry} material={materials['SVGMat.023']} />
          <mesh name="Curve011_12" geometry={nodes.Curve011_12.geometry} material={materials['SVGMat.024']} />
          <mesh name="Curve011_13" geometry={nodes.Curve011_13.geometry} material={materials['SVGMat.025']} />
          <mesh name="Curve011_14" geometry={nodes.Curve011_14.geometry} material={materials['SVGMat.026']} />
          <mesh name="Curve011_15" geometry={nodes.Curve011_15.geometry} material={materials['SVGMat.027']} />
          <mesh name="Curve011_16" geometry={nodes.Curve011_16.geometry} material={materials['SVGMat.028']} />
          <mesh name="Curve011_17" geometry={nodes.Curve011_17.geometry} material={materials['SVGMat.029']} />
          <mesh name="Curve011_18" geometry={nodes.Curve011_18.geometry} material={materials['SVGMat.030']} />
          <mesh name="Curve011_19" geometry={nodes.Curve011_19.geometry} material={materials['SVGMat.031']} />
          <mesh name="Curve011_20" geometry={nodes.Curve011_20.geometry} material={materials['SVGMat.032']} />
          <mesh name="Curve011_21" geometry={nodes.Curve011_21.geometry} material={materials['SVGMat.033']} />
          <mesh name="Curve011_22" geometry={nodes.Curve011_22.geometry} material={materials['SVGMat.034']} />
          <mesh name="Curve011_23" geometry={nodes.Curve011_23.geometry} material={materials['SVGMat.035']} />
          <mesh name="Curve011_24" geometry={nodes.Curve011_24.geometry} material={materials['SVGMat.036']} />
          <mesh name="Curve011_25" geometry={nodes.Curve011_25.geometry} material={materials['SVGMat.037']} />
          <mesh name="Curve011_26" geometry={nodes.Curve011_26.geometry} material={materials['SVGMat.038']} />
          <mesh name="Curve011_27" geometry={nodes.Curve011_27.geometry} material={materials['SVGMat.039']} />
          <mesh name="Curve011_28" geometry={nodes.Curve011_28.geometry} material={materials['SVGMat.040']} />
          <mesh name="Curve011_29" geometry={nodes.Curve011_29.geometry} material={materials['SVGMat.041']} />
          <mesh name="Curve011_30" geometry={nodes.Curve011_30.geometry} material={materials['SVGMat.042']} />
          <mesh name="Curve011_31" geometry={nodes.Curve011_31.geometry} material={materials['SVGMat.043']} />
          <mesh name="Curve011_32" geometry={nodes.Curve011_32.geometry} material={materials['SVGMat.044']} />
          <mesh name="Curve011_33" geometry={nodes.Curve011_33.geometry} material={materials['SVGMat.045']} />
          <mesh name="Curve011_34" geometry={nodes.Curve011_34.geometry} material={materials['SVGMat.046']} />
          <mesh name="Curve011_35" geometry={nodes.Curve011_35.geometry} material={materials['SVGMat.047']} />
          <mesh name="Curve011_36" geometry={nodes.Curve011_36.geometry} material={materials['SVGMat.048']} />
          <mesh name="Curve011_37" geometry={nodes.Curve011_37.geometry} material={materials['SVGMat.049']} />
          <mesh name="Curve011_38" geometry={nodes.Curve011_38.geometry} material={materials['SVGMat.050']} />
          <mesh name="Curve011_39" geometry={nodes.Curve011_39.geometry} material={materials['SVGMat.051']} />
        </group>
        <group ref={Curve007} name="Curve007" position={[6.588, 2.439, 5.444]} rotation={[1.58, 0.038, 2.34]}>
          <mesh name="Curve275" geometry={nodes.Curve275.geometry} material={materials['SVGMat.055']} />
          <mesh name="Curve275_1" geometry={nodes.Curve275_1.geometry} material={materials['SVGMat.053']} />
          <mesh name="Curve275_2" geometry={nodes.Curve275_2.geometry} material={materials['SVGMat.054']} />
          <pointLight ref={Curve07light} intensity={10} color="#96DCFF" position={[0, 0, -1.1]} />
        </group>
        <mesh ref={Curve005} name="Curve005" geometry={nodes.Curve005.geometry} material={materials['Material.035']} position={[5.482, 2.376, 6.267]} rotation={[1.567, 0.006, 2.678]} >
          <pointLight ref={Curve005light} intensity={10} color="#96DCFF" position={[0.2, 0, -1.2]} />
        </mesh>
        <group ref={Curve011} castShadow receiveShadow name="Curve011" position={[2.334, 2.416, 6.917]} rotation={[1.58, 0.018, 2.792]}>
          <mesh name="Curve281" geometry={nodes.Curve281.geometry} material={materials['SVGMat.060']} />
          <mesh name="Curve281_1" geometry={nodes.Curve281_1.geometry} material={materials['SVGMat.058']} />
          <mesh name="Curve281_2" geometry={nodes.Curve281_2.geometry} material={materials['SVGMat.059']} />
          <mesh name="Curve281_3" geometry={nodes.Curve281_3.geometry} material={materials['SVGMat.061']} />
          <mesh name="Curve281_4" geometry={nodes.Curve281_4.geometry} material={materials['SVGMat.062']} />
          <pointLight ref={Curve011light} castShadow receiveShadow intensity={10} color="#96DCFF" position={[0, -0.2, -1.15]} />

        </group>
        <group ref={Curve008} castShadow receiveShadow name="Curve008" position={[1.02, 2.523, 6.909]} rotation={[1.579, 0.004, 2.995]}>
          <mesh name="Curve291" geometry={nodes.Curve291.geometry} material={materials['SVGMat.066']} />
          <mesh name="Curve291_1" geometry={nodes.Curve291_1.geometry} material={materials['SVGMat.068']} />
          <pointLight ref={Curve08light} castShadow receiveShadow intensity={10} color="#96DCFF" position={[0.2, -0.2, -1.1]} />
        </group>
        <mesh ref={Curve006} name="Curve006" geometry={nodes.Curve006.geometry} material={materials['SVGMat.075']} position={[-5.289, 0.781, 6.297]} rotation={[1.551, 0.124, -3.024]} >
          {/* <pointLight   intensity={10} color="#96DCFF"  position={[0, -0.2, 0]} /> */}
        </mesh>
        <group ref={Curve009} name="Curve009" position={[-5.215, 2.578, 6.324]} rotation={[1.554, 0.016, -2.878]}>
          <mesh name="Curve304" geometry={nodes.Curve304.geometry} material={materials['SVGMat.077']} />
          <mesh name="Curve304_1" geometry={nodes.Curve304_1.geometry} material={materials['SVGMat.078']} />
          <pointLight ref={Curve09light} castShadow receiveShadow intensity={10} color="#96DCFF" position={[0.1, 0, -1.1]} />
        </group>
        <mesh ref={Curve010} name="Curve010" geometry={nodes.Curve010.geometry} material={materials['SVGMat.079']} position={[-6.959, 2.883, 5.636]} rotation={[2.068, -0.544, -2.511]} >
          <pointLight ref={Curve010light} castShadow intensity={10} color="#96DCFF" position={[0.33, 0.2, -0.65]} />

        </mesh>
      </group>


    </>
  )
}

useGLTF.preload('/Portfolio3.glb')
